const { SlashCommandBuilder } = require('@discordjs/builders');
const { EmbedBuilder, ActionRowBuilder, ButtonBuilder } = require('discord.js');

    const embed = new EmbedBuilder()
      .setColor('0cd4cc')
      .setTitle('Configurar AutoClear')
      .setDescription('Clique no botão abaixo para configurar o Auto Clear')
      .setFooter({ text: interaction.guild.name, iconURL: interaction.guild.iconURL({ dynamic: true }) })
      .setTimestamp();

    const row = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId('start-autoclear')
          .setLabel('AutoClear Start')
          .setStyle('PRIMARY')
      );

   interaction.reply({ embeds: [embed], components: [row] });

    const filter = i => i.customId === 'start-autoclear' && i.user.id === interaction.user.id;
    const collector = interaction.channel.createMessageComponentCollector({ filter, componentType: 'BUTTON', time: 60000 });

    collector.on('collect', async i => {
      if (i.customId === 'start-autoclear') {
      i.reply({ content: 'Por favor, informe o tempo em segundos:', ephemeral: true });

        const messageFilter = m => m.author.id === interaction.user.id;
        const messageCollector = interaction.channel.createMessageCollector({ filter: messageFilter, max: 1, time: 60000 });

        messageCollector.on('collect', async message => {
          const timeout = parseInt(message.content) * 1000;

          if (isNaN(timeout) |timeout < 10000) {
            return message.reply({ content: 'O tempo de espera deve ser de no mínimo 10 segundos.', ephemeral: true });
          }

          await message.reply({ content: 'Agora, informe o ID do canal:', ephemeral: true });

          const channelCollector = interaction.channel.createMessageCollector({ filter: messageFilter, max: 1, time: 60000 });

          channelCollector.on('collect', async channelMessage => {
            const channelId = channelMessage.content;
            const channel = client.channels.cache.get(channelId);

            if (!channel) {
              return channelMessage.reply({ content: 'Canal não encontrado.', ephemeral: true });
            }

            const activeEmbed = new EmbedBuilder()
              .setColor('0cd4cc')
              .setTitle('Canal Limpado')
              .setDescription('Auto Clear está ativado!')
              .setFooter({ text: interaction.guild.name, iconURL: interaction.guild.iconURL({ dynamic: true }) })
              .setTimestamp();

            const stopRow = new ActionRowBuilder()
              .addComponents(
                new ButtonBuilder()
                  .setCustomId('stop-clear')
                  .setLabel('Parar Auto Clear')
                  .setStyle('DANGER')
              );

            await channelMessage.reply({ embeds: [activeEmbed], components: [stopRow] });

            const intervalId = setInterval(async () => {
              try {
                await channel.bulkDelete(100);
                await channel.send({ embeds: [activeEmbed], components: [stopRow] });
              } catch (error) {
                console.error(error);
                clearInterval(intervalId);
                await channelMessage.followUp({ content: 'Erro ao limpar o canal.', components: [] });
              }
            }, timeout);

            const stopFilter = stopInteraction => stopInteraction.customId === 'stop-clear' && stopInteraction.user.id === interaction.user.id;
            const stopCollector = interaction.channel.createMessageComponentCollector({ filter: stopFilter, componentType: 'BUTTON', time: timeout * 2 });

            stopCollector.on('collect', async stopInteraction => {
              if (stopInteraction.customId === 'stop-clear') {
                clearInterval(intervalId);
                await stopInteraction.update({ content: 'Limpamento Automático Cancelado', components: [] });
              }
            });
          });
        });
      }
    });
